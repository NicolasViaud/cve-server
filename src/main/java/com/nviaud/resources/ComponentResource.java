package com.nviaud.resources;

import com.nviaud.entities.ComponentEntity;
import com.nviaud.entities.ProjectEntity;
import io.quarkus.hibernate.reactive.panache.Panache;
import io.smallrye.mutiny.Uni;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.net.URI;
import java.util.List;

@Path("projects/{projectId}/components")
public class ComponentResource {

    @GET
    @RolesAllowed("user")
    public Uni<List<ComponentEntity>> get(Long projectId) {
        return ComponentEntity.findByProjectId(projectId);
    }

    @GET
    @Path("/{componentId}")
    @RolesAllowed("user")
    public Uni<ComponentEntity> getSingle(Long projectId, Long componentId) {
        return ComponentEntity.findByComponentIdAndProjectIdAnd(componentId, projectId);
    }

    @POST
    @RolesAllowed("admin")
    public Uni<Response> create(@Context UriInfo uriInfo, Long projectId, ComponentEntity componentEntity) {
        return Panache.<ComponentEntity>withTransaction(
                () -> {
                    final ProjectEntity project = new ProjectEntity();
                    project.id = projectId;
                    componentEntity.id = null;
                    componentEntity.project = project;
                    return componentEntity.persist();
                }
        ).onItem().transform(inserted -> {
            final URI uri = uriInfo.getRequestUriBuilder()
                    .path(ComponentResource.class, "getSingle")
                    .build(inserted.id);
            return Response.created(uri).build();
        });
    }

}
