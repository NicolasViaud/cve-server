package com.nviaud.resources;

import com.nviaud.entities.AlertEntity;
import com.nviaud.entities.ReleaseEntity;
import io.smallrye.mutiny.Uni;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.QueryParam;
import java.util.List;

@Path("projects/{projectId}/releases")
public class ReleaseResource {


    @GET
    @RolesAllowed("user")
    public Uni<List<ReleaseEntity>> get(Long projectId) {
        return ReleaseEntity.findByProjectId(projectId);
    }

    @GET
    @Path("/{releaseId}")
    @RolesAllowed("user")
    public Uni<ReleaseEntity> getSingle(Long projectId, Long releaseId) {
        return ReleaseEntity.findByComponentIdAndProjectIdAnd(releaseId, projectId);
    }


    @GET
    @Path("/{releaseId}/alerts")
    @RolesAllowed("user")
    public Uni<List<AlertEntity>> get(Long projectId, Long releaseId, @DefaultValue("false") @QueryParam("showOnlyShouldBeFixed") Boolean showOnlyShouldBeFixed) {
        if(showOnlyShouldBeFixed){
            return AlertEntity.findByReleaseIdAndProjectIdAndShouldBeFixed(releaseId, projectId);
        }else {
            return AlertEntity.findByReleaseIdAndProjectId(releaseId, projectId);
        }
    }

    @GET
    @Path("/{releaseId}/alerts/{alertId}")
    @RolesAllowed("user")
    public Uni<AlertEntity> getSingle(Long projectId, Long releaseId, Long alertId) {
        return AlertEntity.findByAlertIdAndReleaseIdAndProjectId(alertId, releaseId, projectId);
    }


}
