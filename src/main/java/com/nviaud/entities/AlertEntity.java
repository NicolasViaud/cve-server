package com.nviaud.entities;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.quarkus.hibernate.reactive.panache.PanacheEntity;
import io.quarkus.panache.common.Sort;
import io.smallrye.mutiny.Uni;

import javax.persistence.*;
import java.util.List;

/**
 * CVE for a specific release and specific component
 */
@Entity
@Cacheable
@Table(name = "cve_release")
public class AlertEntity extends PanacheEntity {

    /**
     * Field denormalization
     */
    @Column(length = 20)
    public String cveName;

    /**
     * Field denormalization
     */
    public String releaseVersion;

    /**
     * Field denormalization
     */
    public String componentName;

    public enum State{New, NotFixed, Fixed};

    public State state;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    public CveEntity cve;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    public ReleaseEntity release;

    @JsonIgnore
    @ManyToOne(fetch = FetchType.LAZY)
    public ComponentEntity component;

    public static Uni<List<AlertEntity>> findByReleaseIdAndProjectId(Long releaseId, Long projectId){
        return list("release.id = ?1 and release.project.id = ?2", Sort.by("cveName","releaseVersion","componentName"), releaseId, projectId);
    }

    public static Uni<List<AlertEntity>> findByReleaseIdAndProjectIdAndShouldBeFixed(Long releaseId, Long projectId){
        return list("release.id = ?1 and release.project.id = ?2 and cve.fixVersion < releaseVersion and state <> 2", Sort.by("cveName","releaseVersion","componentName"), releaseId, projectId);
    }

    public static Uni<AlertEntity> findByAlertIdAndReleaseIdAndProjectId(Long alertId, Long release, Long projectId){
        return find("id = ?1 and release.id = ?2 and release.project.id = ?3", Sort.by("cveName","releaseVersion","componentName"), alertId, release, projectId).firstResult();
    }

}
